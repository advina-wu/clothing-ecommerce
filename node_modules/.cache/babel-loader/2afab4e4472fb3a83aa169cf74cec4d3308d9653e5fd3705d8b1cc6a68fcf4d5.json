{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\nimport { get } from 'react-hook-form';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCTktpNiAoMe8agYvK7dKZc501EvCgEkwM\",\n  authDomain: \"crown-clothing-db-97357.firebaseapp.com\",\n  projectId: \"crown-clothing-db-97357\",\n  storageBucket: \"crown-clothing-db-97357.appspot.com\",\n  messagingSenderId: \"170754268036\",\n  appId: \"1:170754268036:web:8bbfdcd618e8d8eb751bd1\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\n// a class that create new Google credential with an access code, or use the provider to trigger user authentication flows\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\n\n// should always have only one authentication method for one application\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\n\n// create a database\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async userAuth => {\n  // check if we already have existing document reference\n  // arguments: (database, collection, identifier: uid=Unique ID Identifier)\n  // even if I dont have a document reference in our db, google will still generate one for us.\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot);\n  console.log(userSnapshot.exists);\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","getFirestore","doc","getDoc","setDoc","get","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","console","log","userSnapshot","exists"],"sources":["/Users/advina/Documents/React/clothing-ecommerce/src/utils/firebase.utils.js"],"sourcesContent":["import { initializeApp} from 'firebase/app'\nimport { \n    getAuth, \n    signInWithRedirect,\n    signInWithPopup,\n    GoogleAuthProvider\n} from 'firebase/auth';\nimport {\n    getFirestore,\n    doc,\n    getDoc,\n    setDoc\n} from 'firebase/firestore'\nimport { get } from 'react-hook-form';\n\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCTktpNiAoMe8agYvK7dKZc501EvCgEkwM\",\n  authDomain: \"crown-clothing-db-97357.firebaseapp.com\",\n  projectId: \"crown-clothing-db-97357\",\n  storageBucket: \"crown-clothing-db-97357.appspot.com\",\n  messagingSenderId: \"170754268036\",\n  appId: \"1:170754268036:web:8bbfdcd618e8d8eb751bd1\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\n// a class that create new Google credential with an access code, or use the provider to trigger user authentication flows\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n    prompt: \"select_account\"\n})\n\n// should always have only one authentication method for one application\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\n\n// create a database\nexport const db = getFirestore();\n\nexport const createUserDocumentFromAuth = async (userAuth) =>{\n    // check if we already have existing document reference\n    // arguments: (database, collection, identifier: uid=Unique ID Identifier)\n    // even if I dont have a document reference in our db, google will still generate one for us.\n    const userDocRef = doc(db, 'users', userAuth.uid)\n\n    console.log(userDocRef);\n    \n    const userSnapshot = await getDoc(userDocRef);\n    console.log(userSnapshot);\n    console.log(userSnapshot.exists);\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAO,cAAc;AAC3C,SACIC,OAAO,EACPC,kBAAkB,EAClBC,eAAe,EACfC,kBAAkB,QACf,eAAe;AACtB,SACIC,YAAY,EACZC,GAAG,EACHC,MAAM,EACNC,MAAM,QACH,oBAAoB;AAC3B,SAASC,GAAG,QAAQ,iBAAiB;;AAGrC;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,yCAAyC;EACrDC,SAAS,EAAE,yBAAyB;EACpCC,aAAa,EAAE,qCAAqC;EACpDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGjB,aAAa,CAACU,cAAc,CAAC;;AAEjD;AACA,MAAMQ,QAAQ,GAAG,IAAId,kBAAkB,CAAC,CAAC;AACzCc,QAAQ,CAACC,mBAAmB,CAAC;EACzBC,MAAM,EAAE;AACZ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,IAAI,GAAGpB,OAAO,CAAC,CAAC;AAC7B,OAAO,MAAMqB,qBAAqB,GAAGA,CAAA,KAAMnB,eAAe,CAACkB,IAAI,EAAEH,QAAQ,CAAC;;AAE1E;AACA,OAAO,MAAMK,EAAE,GAAGlB,YAAY,CAAC,CAAC;AAEhC,OAAO,MAAMmB,0BAA0B,GAAG,MAAOC,QAAQ,IAAI;EACzD;EACA;EACA;EACA,MAAMC,UAAU,GAAGpB,GAAG,CAACiB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACE,GAAG,CAAC;EAEjDC,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;EAEvB,MAAMI,YAAY,GAAG,MAAMvB,MAAM,CAACmB,UAAU,CAAC;EAC7CE,OAAO,CAACC,GAAG,CAACC,YAAY,CAAC;EACzBF,OAAO,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,CAAC;AACpC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}